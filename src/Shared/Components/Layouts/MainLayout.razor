@using Whitestone.SegnoSharp.Common.ViewModels
@inherits LayoutComponentBase

<PageTitle>SegnoSharp</PageTitle>

<header>
    <div class="logo"><img src="/img/logoHeader.png" alt="SegnoSharp Logo" /><span>SegnoSharp</span></div>
    <div class="identity">
        <AuthorizeView Policy="IgnoreRole">
            <Authorized>
                <div class="user">
                    Logged in as <span class="username">@_loggedInAs</span>
                    <NavLink href="/auth/logout">Logout</NavLink>
                </div>
            </Authorized>
            <Authorizing>
                Please wait while logging in
            </Authorizing>
            <NotAuthorized>
                <NavLink href="@("/auth/login?redirectUri=" + @NavigationManager.Uri)">Login</NavLink>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</header>

<nav class="admin-nav">
    <ul class="menu">
        <li><NavLink href="/" Match="NavLinkMatch.All"><span class="fa-solid fa-house"></span>Home</NavLink></li>
        @foreach (MenuNavigationModel nav in ModuleNavItems.Where(n => !n.IsAdmin).OrderBy(n => n.SortOrder))
        {
            if (nav.Children.Any())
            {
                <li class="has-submenu">
                    <input id="submenu-@(nav.Id)" type="checkbox" role="button" class="submenu-toggle" checked="@(IsExpanded(nav.Path))" />
                    <label for="submenu-@(nav.Id)" class="submenu-label">
                        <NavLink href="@nav.Path"><span class="fa-solid @nav.Icon"></span>@nav.MenuTitle</NavLink>
                    </label>
                    <ul class="submenu">
                        @foreach (BaseMenuNavigation navChild in nav.Children.OrderBy(c => c.SortOrder))
                        {
                            <li><NavLink href="@navChild.Path">@navChild.MenuTitle</NavLink></li>
                        }
                    </ul>
                </li>
            }
            else
            {
                <li><NavLink href="@nav.Path"><span class="fa-solid @nav.Icon"></span>@nav.MenuTitle</NavLink></li>
            }
        }
        <AuthorizeView>
            <Authorized>
                <li><span><span class="fa-solid fa-screwdriver-wrench"></span>Admin</span></li>
                @foreach (MenuNavigationModel nav in ModuleNavItems.Where(n => n.IsAdmin).OrderBy(n => n.SortOrder))
                {
                    if (nav.Children.Any())
                    {
                        <li class="has-submenu">
                            <input id="submenu-@(nav.Id)-admin" type="checkbox" role="button" class="submenu-toggle" checked="@(IsExpanded(nav.Path))" />
                            <label for="submenu-@(nav.Id)-admin" class="submenu-label">
                                <NavLink href="@nav.Path"><span class="fa-solid @nav.Icon"></span>@nav.MenuTitle</NavLink>
                            </label>
                            <ul class="submenu">
                                @foreach (var navChild in nav.Children.OrderBy(c => c.SortOrder))
                                {
                                    <li><NavLink href="@navChild.Path">@navChild.MenuTitle</NavLink></li>
                                }
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li><NavLink href="@nav.Path"><span class="fa-solid @nav.Icon"></span>@nav.MenuTitle</NavLink></li>
                    }
                }
            </Authorized>
        </AuthorizeView>
    </ul>
</nav>

<main class="content">
    @Body
</main>
